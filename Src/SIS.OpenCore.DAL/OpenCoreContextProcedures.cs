// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Data;
using System.Threading.Tasks;
using SIS.OpenCore.Model;

namespace SIS.OpenCore.DAL.Context
{
    public partial class OpenCoreContextProcedures
    {
        private readonly OpenCoreContext _context;

        public OpenCoreContextProcedures(OpenCoreContext context)
        {
            _context = context;
        }

        public async Task<int> SP_ADD_LedgerNature(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_ADD_LedgerNature]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> SP_ADD_LedgerPostingLevel(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_ADD_LedgerPostingLevel]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> SP_AddCIF(short? CompanyNo, short? CIF_TYPE, string CIF_CLASS, string CIF_NO, string SearchKey, string FirstName, string MiddleName, string LastName, string NationalID, DateTime? EFFECTIVE_DT, OutputParameter<string> CIF_NO_OUT, OutputParameter<int> returnValue = null)
        {
            var parameterCIF_NO_OUT = new SqlParameter
            {
                ParameterName = "CIF_NO_OUT",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterCompanyNo = new SqlParameter
            {
                ParameterName = "CompanyNo",
                Value = CompanyNo ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };

            var parameterCIF_TYPE = new SqlParameter
            {
                ParameterName = "CIF_TYPE",
                Value = CIF_TYPE ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };

            var parameterCIF_CLASS = new SqlParameter
            {
                ParameterName = "CIF_CLASS",
                Size = 20,
                Value = CIF_CLASS ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterCIF_NO = new SqlParameter
            {
                ParameterName = "CIF_NO",
                Value = CIF_NO ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterSearchKey = new SqlParameter
            {
                ParameterName = "SearchKey",
                Value = SearchKey ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterFirstName = new SqlParameter
            {
                ParameterName = "FirstName",
                Value = FirstName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterMiddleName = new SqlParameter
            {
                ParameterName = "MiddleName",
                Value = MiddleName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterLastName = new SqlParameter
            {
                ParameterName = "LastName",
                Value = LastName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterNationalID = new SqlParameter
            {
                ParameterName = "NationalID",
                Size = 160,
                Value = NationalID ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterEFFECTIVE_DT = new SqlParameter
            {
                ParameterName = "EFFECTIVE_DT",
                Value = EFFECTIVE_DT ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AddCIF] @CIF_NO_OUT OUTPUT, @CompanyNo, @CIF_TYPE, @CIF_CLASS, @CIF_NO, @SearchKey, @FirstName, @MiddleName, @LastName, @NationalID, @EFFECTIVE_DT", parameterCIF_NO_OUT, parameterCompanyNo, parameterCIF_TYPE, parameterCIF_CLASS, parameterCIF_NO, parameterSearchKey, parameterFirstName, parameterMiddleName, parameterLastName, parameterNationalID, parameterEFFECTIVE_DT, parameterreturnValue);

            CIF_NO_OUT.SetValue(parameterCIF_NO_OUT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> SP_AddCIF_Class(short? CompanyNo, byte? TYPE, string NAME, string CIF_CLASS, DateTime? EFFECTIVE_DT, string REFERENCE, OutputParameter<string> CIF_CLASS_OUT, OutputParameter<int> returnValue = null)
        {
            var parameterCIF_CLASS_OUT = new SqlParameter
            {
                ParameterName = "CIF_CLASS_OUT",
                Size = 8,
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterCompanyNo = new SqlParameter
            {
                ParameterName = "CompanyNo",
                Value = CompanyNo ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };

            var parameterTYPE = new SqlParameter
            {
                ParameterName = "TYPE",
                Value = TYPE ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.TinyInt,
            };

            var parameterNAME = new SqlParameter
            {
                ParameterName = "NAME",
                Size = 160,
                Value = NAME ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterCIF_CLASS = new SqlParameter
            {
                ParameterName = "CIF_CLASS",
                Size = 8,
                Value = CIF_CLASS ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterEFFECTIVE_DT = new SqlParameter
            {
                ParameterName = "EFFECTIVE_DT",
                Value = EFFECTIVE_DT ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterREFERENCE = new SqlParameter
            {
                ParameterName = "REFERENCE",
                Value = REFERENCE ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AddCIF_Class] @CIF_CLASS_OUT OUTPUT, @CompanyNo, @TYPE, @NAME, @CIF_CLASS, @EFFECTIVE_DT, @REFERENCE", parameterCIF_CLASS_OUT, parameterCompanyNo, parameterTYPE, parameterNAME, parameterCIF_CLASS, parameterEFFECTIVE_DT, parameterREFERENCE, parameterreturnValue);

            CIF_CLASS_OUT.SetValue(parameterCIF_CLASS_OUT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> SP_AddCIF_EXT1(string CIF, OutputParameter<int> returnValue = null)
        {
            var parameterCIF = new SqlParameter
            {
                ParameterName = "CIF",
                Value = CIF ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AddCIF_EXT1] @CIF", parameterCIF, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> SP_AddEditCurrency(string ISOCode, string Symbol, short? Fractions, string Name, OutputParameter<int> returnValue = null)
        {
            var parameterISOCode = new SqlParameter
            {
                ParameterName = "ISOCode",
                Size = 8,
                Value = ISOCode ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterSymbol = new SqlParameter
            {
                ParameterName = "Symbol",
                Size = 8,
                Value = Symbol ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterFractions = new SqlParameter
            {
                ParameterName = "Fractions",
                Value = Fractions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };

            var parameterName = new SqlParameter
            {
                ParameterName = "Name",
                Size = 200,
                Value = Name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_AddEditCurrency] @ISOCode, @Symbol, @Fractions, @Name", parameterISOCode, parameterSymbol, parameterFractions, parameterName, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
