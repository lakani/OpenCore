// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SIS.OpenCore.Model;

namespace SIS.OpenCore.DAL.Context
{
    public partial class OpenCoreContextProcedures
    {
        private readonly OpenCoreContext _context;

        public OpenCoreContextProcedures(OpenCoreContext context)
        {
            _context = context;
        }

        public async Task<SP_ADD_LedgerNatureResult[]> SP_ADD_LedgerNature(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_ADD_LedgerNatureResult>("EXEC @returnValue = [dbo].[SP_ADD_LedgerNature]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<SP_ADD_LedgerPostingLevelResult[]> SP_ADD_LedgerPostingLevel(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_ADD_LedgerPostingLevelResult>("EXEC @returnValue = [dbo].[SP_ADD_LedgerPostingLevel]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<SP_AddCIFResult[]> SP_AddCIF(short? CompanyNo, short? CIF_TYPE, string CIF_CLASS, string CIF_NO, string SearchKey, string FirstName, string MiddleName, string LastName, string NationalID, DateTime? EFFECTIVE_DT, OutputParameter<string> CIF_NO_OUT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterCIF_NO_OUT = new SqlParameter
            {
                ParameterName = "CIF_NO_OUT",
                Size = -1,
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterCIF_NO_OUT,
                new SqlParameter
                {
                    ParameterName = "CompanyNo",
                    Value = CompanyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CIF_TYPE",
                    Value = CIF_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CIF_CLASS",
                    Size = 20,
                    Value = CIF_CLASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CIF_NO",
                    Size = -1,
                    Value = CIF_NO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchKey",
                    Size = -1,
                    Value = SearchKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = -1,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName",
                    Size = -1,
                    Value = MiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = -1,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalID",
                    Size = 160,
                    Value = NationalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EFFECTIVE_DT",
                    Value = EFFECTIVE_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_AddCIFResult>("EXEC @returnValue = [dbo].[SP_AddCIF] @CIF_NO_OUT OUTPUT, @CompanyNo, @CIF_TYPE, @CIF_CLASS, @CIF_NO, @SearchKey, @FirstName, @MiddleName, @LastName, @NationalID, @EFFECTIVE_DT", sqlParameters, cancellationToken);

            CIF_NO_OUT.SetValue(parameterCIF_NO_OUT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<SP_AddCIF_ClassResult[]> SP_AddCIF_Class(short? CompanyNo, byte? TYPE, string NAME, string CIF_CLASS, DateTime? EFFECTIVE_DT, string REFERENCE, OutputParameter<string> CIF_CLASS_OUT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterCIF_CLASS_OUT = new SqlParameter
            {
                ParameterName = "CIF_CLASS_OUT",
                Size = 8,
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterCIF_CLASS_OUT,
                new SqlParameter
                {
                    ParameterName = "CompanyNo",
                    Value = CompanyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TYPE",
                    Value = TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "NAME",
                    Size = 160,
                    Value = NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CIF_CLASS",
                    Size = 8,
                    Value = CIF_CLASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EFFECTIVE_DT",
                    Value = EFFECTIVE_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "REFERENCE",
                    Size = -1,
                    Value = REFERENCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_AddCIF_ClassResult>("EXEC @returnValue = [dbo].[SP_AddCIF_Class] @CIF_CLASS_OUT OUTPUT, @CompanyNo, @TYPE, @NAME, @CIF_CLASS, @EFFECTIVE_DT, @REFERENCE", sqlParameters, cancellationToken);

            CIF_CLASS_OUT.SetValue(parameterCIF_CLASS_OUT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<SP_AddCIF_EXT1Result[]> SP_AddCIF_EXT1(string CIF, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CIF",
                    Size = -1,
                    Value = CIF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_AddCIF_EXT1Result>("EXEC @returnValue = [dbo].[SP_AddCIF_EXT1] @CIF", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<SP_AddEditCurrencyResult[]> SP_AddEditCurrency(string ISOCode, string Symbol, short? Fractions, string Name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ISOCode",
                    Size = 8,
                    Value = ISOCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Symbol",
                    Size = 8,
                    Value = Symbol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fractions",
                    Value = Fractions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 200,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_AddEditCurrencyResult>("EXEC @returnValue = [dbo].[SP_AddEditCurrency] @ISOCode, @Symbol, @Fractions, @Name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
